name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      migration_type:
        description: 'Type of migration'
        required: true
        default: 'forward'
        type: choice
        options:
        - forward
        - rollback

jobs:
  database-migration:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd server
          npm ci
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name garment-${{ github.event.inputs.environment }}-cluster
      
      - name: Create Database Backup (Production only)
        if: github.event.inputs.environment == 'production'
        run: ./deploy/scripts/backup.sh ${{ github.event.inputs.environment }}
      
      - name: Run Migration Forward
        if: github.event.inputs.migration_type == 'forward'
        run: |
          kubectl create job --from=cronjob/db-migration migration-$(date +%s) -n garment-${{ github.event.inputs.environment }}
          kubectl wait --for=condition=complete job/migration-$(date +%s) -n garment-${{ github.event.inputs.environment }} --timeout=600s
      
      - name: Run Migration Rollback
        if: github.event.inputs.migration_type == 'rollback'
        run: |
          kubectl create job --from=cronjob/db-rollback rollback-$(date +%s) -n garment-${{ github.event.inputs.environment }}
          kubectl wait --for=condition=complete job/rollback-$(date +%s) -n garment-${{ github.event.inputs.environment }} --timeout=600s
      
      - name: Verify Database Health
        run: |
          kubectl exec -n garment-${{ github.event.inputs.environment }} deployment/mysql -- mysqladmin ping
      
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Database migration ${{ github.event.inputs.migration_type }} completed for ${{ github.event.inputs.environment }}!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}